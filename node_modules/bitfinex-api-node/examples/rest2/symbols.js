'use strict'

process.env.DEBUG = 'bfx:examples:*'

const debug = require('debug')('bfx:examples:rest2_symbols')
const bfx = require('../bfx')
const rest = bfx.rest(2)

var symbol_array = [],
  ETH_Pairs = [],
  BTC_Pairs = [],
  USD_Pairs = [],
  ETHBTC_pairs = [];

var e = 'ETH', b = 'BTC';
var key, value, result;

var makeArray = function (sub){
  var array_s = symbol_array[0]
  array_s.forEach(val => {
    if(val.substring(4) == sub){
      sub == e ? ETH_Pairs.push(val) : BTC_Pairs.push(val) 
      debug('Added',val, 'to', sub, 'array')
    }
    //debug(ETH_Pairs)
  })
}

var compareArray = function (a1, a2){
  a1.forEach(val =>{
    a2.forEach(val2 =>{ 
      var alt = val2.substring(0,4)
    if(val.includes(alt)){
      ETHBTC_pairs.push(val)
      ETHBTC_pairs.push(val2)
      debug('Pushed %s and %s to ETHBTC_pairs', val, val2)
    }
    })
  })
  ETHBTC_pairs.push('tETHBTC')
}

debug('fetching symbol list...')

rest.symbols().then(symbols => {
  symbol_array.push(symbols.map(s => `t${s.toUpperCase()}`))
  //debug(symbol_array)
  debug('available symbols are: %s', symbol_array)
  makeArray(e);
  debug('Done', e)
  makeArray(b);
  debug('Done', b)
  compareArray(ETH_Pairs, BTC_Pairs)
  //debug(ETHBTC_pairs)
}).catch(err => {
  debug('error: %s', err)
})

module.exports.symbol_array = symbol_array;
module.exports.ethpairs = ETH_Pairs;
module.exports.btcpairs = BTC_Pairs;
module.exports.ethbtcpairs = ETHBTC_pairs;

