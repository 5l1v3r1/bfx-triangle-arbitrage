'use strict'

process.env.DEBUG = 'bfx:examples:*'

const debug = require('debug')('bfx:examples:rest2_symbols')
const bfx = require('../bfx')
const rest = bfx.rest(2)

var e = 'ETH', b = 'BTC', u = 'USD', r = 'EUR', g = 'GBP', j = 'JPY';
var symbolarr = [e,b,u,r,g,j];

var symbol_array = [];
// Main pairs
var MAIN_pairs = [] // ? Combination of symbolarr elements
// Base pairs
var ETH_Pairs = [],
    BTC_Pairs = [],
    USD_Pairs = [],
    EUR_Pairs = [],
    GBP_Pairs = [],
    JPY_Pairs = [];

// Combined arrays
var ETHBTC_pairs = [],
    USDBTC_pairs = [],
    USDETH_pairs = [],
    EURBTC_pairs = [],
    EURETH_pairs = [],
    GBPBTC_pairs = [],
    GBPETH_pairs = [],
    JPYBTC_pairs = [],
    JPYETH_pairs = [];

// Overall array    
var overall = [];
var key, value, result;

function makeMainpairs () {
  let eth = symbolarr[0], btc = symbolarr[1];
  for(var i = 2; i <= symbolarr.length; i++) {
    let val1 = 't' + String(symbolarr[i] + eth).toUpperCase();
    let val2 = 't' + String(symbolarr[i] + btc).toUpperCase(); 
    MAIN_pairs.push(val1);
    MAIN_pairs.push(val2);
  }
  debug('Mainpair array created')
}

function makeArray (sub){
  var array_s = symbol_array[0]
  array_s.forEach(val => {
    if(val.substring(4) == sub){
      
      if(sub == e) {
        ETH_Pairs.push(val)
      }
      if(sub == b) {
        BTC_Pairs.push(val)
      }
      if(sub == u) {
        USD_Pairs.push(val)
      }
      if(sub == r) {
        EUR_Pairs.push(val)
      }
      if(sub == g) {
        GBP_Pairs.push(val)
      }
      if(sub == j) {
        JPY_Pairs.push(val)
      }

      debug('Added',val, 'to', sub, 'array')
    }
  })

  debug('Done', sub)
}

function compareArray (a1, a2, finalarr){
  a1.forEach(val =>{
    a2.forEach(val2 =>{ 
      var alt = val2.substring(0,4)
      if(val.includes(alt)){
        finalarr.push(val)
        finalarr.push(val2)
        debug('Pushed %s and %s', val, val2)
      }
    })
  })
}

debug('fetching symbol list...')

rest.symbols().then(symbols => {
  symbol_array.push(symbols.map(s => `t${s.toUpperCase()}`))
  debug('available symbols are: %s', symbol_array)
  for(var i = 0; i<=symbolarr.length; i++) {
    makeArray(symbolarr[i]);
  }
  // TODO: refactor this block
  makeMainpairs();
  compareArray(ETH_Pairs, BTC_Pairs, ETHBTC_pairs);
  compareArray(USD_Pairs, BTC_Pairs, USDBTC_pairs);
  compareArray(USD_Pairs, ETH_Pairs, USDETH_pairs);
  compareArray(GBP_Pairs, BTC_Pairs, GBPBTC_pairs);
  compareArray(GBP_Pairs, ETH_Pairs, GBPETH_pairs);
  compareArray(EUR_Pairs, BTC_Pairs, EURBTC_pairs);
  compareArray(EUR_Pairs, ETH_Pairs, EURETH_pairs);
  
}).catch(err => {
  debug('error: %s', err)
})

module.exports.symbol_array = symbol_array;
module.exports.mainpairs = MAIN_pairs;
module.exports.ethpairs = ETH_Pairs;
module.exports.btcpairs = BTC_Pairs;
module.exports.usdpairs = USD_Pairs;
module.exports.eurpairs = EUR_Pairs;

module.exports.ethbtc_pairs = ETHBTC_pairs;
module.exports.btcusd_pairs = USDBTC_pairs;
module.exports.ethusd_pairs = USDETH_pairs;
module.exports.btceur_pairs = EURBTC_pairs;  
module.exports.etheur_pairs = EURETH_pairs;
module.exports.btcjpy_pairs = JPYBTC_pairs;  
module.exports.ethjpy_pairs = JPYETH_pairs;
